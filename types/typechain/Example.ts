/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Example {
  export type DoctorStruct = {
    etherAddress: AddressLike;
    name: string;
    specialty: string;
    isApproved: boolean;
  };

  export type DoctorStructOutput = [
    etherAddress: string,
    name: string,
    specialty: string,
    isApproved: boolean
  ] & {
    etherAddress: string;
    name: string;
    specialty: string;
    isApproved: boolean;
  };

  export type PatientStruct = {
    id: string;
    name: string;
    weight: BigNumberish;
    height: BigNumberish;
    bloodGroup: string;
    bloodPressure: BigNumberish;
    covidVaccinated: boolean;
  };

  export type PatientStructOutput = [
    id: string,
    name: string,
    weight: bigint,
    height: bigint,
    bloodGroup: string,
    bloodPressure: bigint,
    covidVaccinated: boolean
  ] & {
    id: string;
    name: string;
    weight: bigint;
    height: bigint;
    bloodGroup: string;
    bloodPressure: bigint;
    covidVaccinated: boolean;
  };

  export type VisitHistoryStruct = {
    patientId: string;
    doctorAddress: AddressLike;
    date: string;
    diagnosis: string;
    prescription: string;
  };

  export type VisitHistoryStructOutput = [
    patientId: string,
    doctorAddress: string,
    date: string,
    diagnosis: string,
    prescription: string
  ] & {
    patientId: string;
    doctorAddress: string;
    date: string;
    diagnosis: string;
    prescription: string;
  };
}

export interface ExampleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEditDoctorData"
      | "addEditPatient"
      | "addVisitHistoryByDoctor"
      | "approveDoctor"
      | "getDoctor"
      | "getDoctors"
      | "getDoctorsLength"
      | "getPatient"
      | "getPatients"
      | "getPatientsLength"
      | "getRole"
      | "getVisitHistoriesByPatient"
      | "register"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEditDoctorData",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addEditPatient",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addVisitHistoryByDoctor",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveDoctor",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDoctor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDoctors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDoctorsLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPatient", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPatients",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientsLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRole", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVisitHistoriesByPatient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEditDoctorData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEditPatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVisitHistoryByDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDoctor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDoctors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDoctorsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPatient", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPatients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVisitHistoriesByPatient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
}

export interface Example extends BaseContract {
  connect(runner?: ContractRunner | null): Example;
  waitForDeployment(): Promise<this>;

  interface: ExampleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEditDoctorData: TypedContractMethod<
    [doctorAddr: AddressLike, name: string, specialty: string],
    [void],
    "nonpayable"
  >;

  addEditPatient: TypedContractMethod<
    [
      id: string,
      name: string,
      weight: BigNumberish,
      height: BigNumberish,
      bloodGroup: string,
      bloodPressure: BigNumberish,
      covidVaccinated: boolean
    ],
    [void],
    "nonpayable"
  >;

  addVisitHistoryByDoctor: TypedContractMethod<
    [patientId: string, date: string, diagnosis: string, prescription: string],
    [void],
    "nonpayable"
  >;

  approveDoctor: TypedContractMethod<
    [doctorAddr: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  getDoctor: TypedContractMethod<
    [doctor: AddressLike],
    [Example.DoctorStructOutput],
    "view"
  >;

  getDoctors: TypedContractMethod<
    [from: BigNumberish, to: BigNumberish],
    [[bigint, string[], string[], string[], boolean[]]],
    "view"
  >;

  getDoctorsLength: TypedContractMethod<[], [bigint], "view">;

  getPatient: TypedContractMethod<
    [id: string],
    [Example.PatientStructOutput],
    "view"
  >;

  getPatients: TypedContractMethod<
    [from: BigNumberish, to: BigNumberish],
    [
      [
        bigint,
        string[],
        string[],
        bigint[],
        bigint[],
        string[],
        bigint[],
        boolean[]
      ] & {
        count: bigint;
        id: string[];
        name: string[];
        weight: bigint[];
        height: bigint[];
        bloodGroup: string[];
        bloodPressure: bigint[];
        covidVaccinated: boolean[];
      }
    ],
    "view"
  >;

  getPatientsLength: TypedContractMethod<[], [bigint], "view">;

  getRole: TypedContractMethod<[], [string], "view">;

  getVisitHistoriesByPatient: TypedContractMethod<
    [id: string],
    [Example.VisitHistoryStructOutput[]],
    "view"
  >;

  register: TypedContractMethod<
    [name: string, specialty: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEditDoctorData"
  ): TypedContractMethod<
    [doctorAddr: AddressLike, name: string, specialty: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addEditPatient"
  ): TypedContractMethod<
    [
      id: string,
      name: string,
      weight: BigNumberish,
      height: BigNumberish,
      bloodGroup: string,
      bloodPressure: BigNumberish,
      covidVaccinated: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addVisitHistoryByDoctor"
  ): TypedContractMethod<
    [patientId: string, date: string, diagnosis: string, prescription: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveDoctor"
  ): TypedContractMethod<
    [doctorAddr: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDoctor"
  ): TypedContractMethod<
    [doctor: AddressLike],
    [Example.DoctorStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDoctors"
  ): TypedContractMethod<
    [from: BigNumberish, to: BigNumberish],
    [[bigint, string[], string[], string[], boolean[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDoctorsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPatient"
  ): TypedContractMethod<[id: string], [Example.PatientStructOutput], "view">;
  getFunction(
    nameOrSignature: "getPatients"
  ): TypedContractMethod<
    [from: BigNumberish, to: BigNumberish],
    [
      [
        bigint,
        string[],
        string[],
        bigint[],
        bigint[],
        string[],
        bigint[],
        boolean[]
      ] & {
        count: bigint;
        id: string[];
        name: string[];
        weight: bigint[];
        height: bigint[];
        bloodGroup: string[];
        bloodPressure: bigint[];
        covidVaccinated: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPatientsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRole"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVisitHistoriesByPatient"
  ): TypedContractMethod<
    [id: string],
    [Example.VisitHistoryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [name: string, specialty: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
