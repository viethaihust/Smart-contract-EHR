/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Example {
  export type PatientMedicalDataStruct = {
    etherAddress: AddressLike;
    name: string;
    weight: BigNumberish;
    height: BigNumberish;
    bloodGroup: string;
    bloodPressure: BigNumberish;
    covidVaccine: boolean;
  };

  export type PatientMedicalDataStructOutput = [
    etherAddress: string,
    name: string,
    weight: bigint,
    height: bigint,
    bloodGroup: string,
    bloodPressure: bigint,
    covidVaccine: boolean
  ] & {
    etherAddress: string;
    name: string;
    weight: bigint;
    height: bigint;
    bloodGroup: string;
    bloodPressure: bigint;
    covidVaccine: boolean;
  };

  export type VisitHistoryDataStruct = {
    patientAddress: AddressLike;
    doctorAddress: AddressLike;
    date: string;
    diagnosis: string;
    prescription: string;
  };

  export type VisitHistoryDataStructOutput = [
    patientAddress: string,
    doctorAddress: string,
    date: string,
    diagnosis: string,
    prescription: string
  ] & {
    patientAddress: string;
    doctorAddress: string;
    date: string;
    diagnosis: string;
    prescription: string;
  };
}

export interface ExampleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEditDoctorData"
      | "addEditPatientMedicalData"
      | "addVisitHistory"
      | "doctorCount"
      | "editPatientMedicalDataByDoctor"
      | "getPatientMedicalList"
      | "getVisitHistoryList"
      | "givePermission"
      | "patientCount"
      | "revokePermission"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEditDoctorData",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addEditPatientMedicalData",
    values: [
      AddressLike,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addVisitHistory",
    values: [AddressLike, AddressLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "doctorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editPatientMedicalDataByDoctor",
    values: [
      AddressLike,
      AddressLike,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientMedicalList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVisitHistoryList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "givePermission",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "patientCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokePermission",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEditDoctorData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEditPatientMedicalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVisitHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doctorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editPatientMedicalDataByDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientMedicalList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVisitHistoryList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "patientCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePermission",
    data: BytesLike
  ): Result;
}

export interface Example extends BaseContract {
  connect(runner?: ContractRunner | null): Example;
  waitForDeployment(): Promise<this>;

  interface: ExampleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEditDoctorData: TypedContractMethod<
    [etherAddress: AddressLike, name: string, specialty: string],
    [void],
    "nonpayable"
  >;

  addEditPatientMedicalData: TypedContractMethod<
    [
      etherAddress: AddressLike,
      name: string,
      weight: BigNumberish,
      height: BigNumberish,
      bloodGroup: string,
      bloodPressure: BigNumberish,
      covidVaccine: boolean
    ],
    [void],
    "nonpayable"
  >;

  addVisitHistory: TypedContractMethod<
    [
      patientAddress: AddressLike,
      doctorAddress: AddressLike,
      date: string,
      diagnosis: string,
      prescription: string
    ],
    [void],
    "nonpayable"
  >;

  doctorCount: TypedContractMethod<[], [bigint], "view">;

  editPatientMedicalDataByDoctor: TypedContractMethod<
    [
      doctorAddress: AddressLike,
      patientAddress: AddressLike,
      name: string,
      weight: BigNumberish,
      height: BigNumberish,
      bloodGroup: string,
      bloodPressure: BigNumberish,
      covidVaccine: boolean
    ],
    [void],
    "nonpayable"
  >;

  getPatientMedicalList: TypedContractMethod<
    [etherAddress: AddressLike],
    [Example.PatientMedicalDataStructOutput],
    "view"
  >;

  getVisitHistoryList: TypedContractMethod<
    [patientAddress: AddressLike],
    [Example.VisitHistoryDataStructOutput[]],
    "view"
  >;

  givePermission: TypedContractMethod<
    [patientAddress: AddressLike, doctorAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  patientCount: TypedContractMethod<[], [bigint], "view">;

  revokePermission: TypedContractMethod<
    [patientAddress: AddressLike, doctorAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEditDoctorData"
  ): TypedContractMethod<
    [etherAddress: AddressLike, name: string, specialty: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addEditPatientMedicalData"
  ): TypedContractMethod<
    [
      etherAddress: AddressLike,
      name: string,
      weight: BigNumberish,
      height: BigNumberish,
      bloodGroup: string,
      bloodPressure: BigNumberish,
      covidVaccine: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addVisitHistory"
  ): TypedContractMethod<
    [
      patientAddress: AddressLike,
      doctorAddress: AddressLike,
      date: string,
      diagnosis: string,
      prescription: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "doctorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "editPatientMedicalDataByDoctor"
  ): TypedContractMethod<
    [
      doctorAddress: AddressLike,
      patientAddress: AddressLike,
      name: string,
      weight: BigNumberish,
      height: BigNumberish,
      bloodGroup: string,
      bloodPressure: BigNumberish,
      covidVaccine: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPatientMedicalList"
  ): TypedContractMethod<
    [etherAddress: AddressLike],
    [Example.PatientMedicalDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVisitHistoryList"
  ): TypedContractMethod<
    [patientAddress: AddressLike],
    [Example.VisitHistoryDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "givePermission"
  ): TypedContractMethod<
    [patientAddress: AddressLike, doctorAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "patientCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokePermission"
  ): TypedContractMethod<
    [patientAddress: AddressLike, doctorAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  filters: {};
}
